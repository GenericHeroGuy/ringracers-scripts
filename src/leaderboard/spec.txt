Binary leaderboard spec

// map stores (one per map)
magic "LEADERBOARD"
byte VERSION
short CHECKSUM // of map title

num NUMRECORDS
	num ID

	num FLAGS
	// b0:   SPB Attack
	// b1:   SPBA justice
	// b2:   SPBA KARTBIG
	// b3:   SPBA expert
	// b4:   combi
	// b5:   has ghosts
	// b7:   encore

	num TIME

	byte NUMSPLITS
		num SPLIT

	byte NUMPLAYERS
		string NAME
		string SKIN
		byte COLOR
		byte STATS // b7-4: speed, b0-3: weight
		lstring GHOST

num is a variable-length number, bit 7 set indicates more data
strings are pascal-style, string = 1 byte length, lstring = 2 bytes length


// coldstore script
magic "COLDSTORE"
// no version field, keep your coldstore updated!
string DIRNAME // lb_store_directory

// for each map (repeated until EOF)
	num MAPNUM
	short CHECKSUM
	num NUMRECORDS
		// see record format above



Binary ghost data spec

// ghost header
num STARTOFS // leveltime when ghost starts

// repeat until end of file
byte FLAGS
// b0-3: "fake" mobj frame (basically divided by 2, see below)
// b4: XY present
// b5: Z present
// b6: angle present
// b7: ghost special

// 8-bit signed momentum/angle delta (with varying precision)
bloat/nil XDELTA
bloat/nil YDELTA
bloat/nil ZDELTA
bloat/nil ADELTA

bloating point?
not really floating point, just encodes 4 bits of the number at a time
1 sign bit
3 exponent bits
4 fraction bits
exp 0: FRACBITS+12 (31-28)
exp 1: FRACBITS+8  (27-24)
exp 2: FRACBITS+4  (23-20)
exp 3: FRACBITS+0  (19-16)
exp 4: FRACBITS-4  (15-12)
exp 5: FRACBITS-8  (11-8)
exp 6: FRACBITS-12 (7-4)
exp 7: FRACBITS-16 (3-0)

fake mobj frames
why store the full frame number when you can just store the specific animation?
0: STAND   8: RUNR
1: STANDL  9: DRIFTL
2: STANDR  10: DRIFTR
3: WALK    11: SPIN
4: WALKL   12: SQUISH
5: WALKR   13: POGO
6: RUN     14: reserved
7: RUNL    15: reserved
NOTE: Simple AnimaL plays by different rules, see code
